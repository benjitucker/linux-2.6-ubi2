//:ts=4

Design Goals 

- Fast (zero?) attach time
- Safe with power outage


Physical Volume structure
=========================

 
  -----------------------   ^
  |                     |   |
  |  -----------------  |   |
  |  |      PEB 0    |  |   |
  |  -----------------  |   |
  |  |      PEB 1    |  |   |
  |  -----------------  |   |
  |          .          |   90%
  |          .          |   |
  |          .          |   |
  |  -----------------  |   |
  |  |      PEB N    |  |   |
  |  -----------------  |   v
  -----------------------
  |                     |   ^
  |  -----------------  |   |
  |  | Free PEB 0    |  |   |
  |  -----------------  |   |
  |  | Free PEB 1    |  |   |
  |  -----------------  |   |
  |          .          |   10%
  |          .          |   |
  |          .          |   |
  |  -----------------  |   |
  |  | Free PEB N    |  |   |
  |  -----------------  |   v
  -----------------------

Alternative idea: Unchained free PEB
------------------------------------

In this scheme, instead of maintaining lists of free PEBs, PEBs that are free
are simply those that are fully erased*. This avoids having to maintain the free
list(s) which itself would require LLP updated (sub-page writes). This causes
additional page wear.
Free PEBs can be identified by empty first sub-page if the page to completely 
erased.
	- How do we identify free PEBs without reading to whole PEB.
		- if the first sub-page is all FF's
			or
		- if the active LLP Header has the Free bit set.

    - To free up (garbage collect GC) free PEBs:
        - reduce the PEB chain to length 1
            - LLP update when all LLP array elements have been used problem???
		- Always leave the last sub-page available for the final LLP
			header even if this means that the LEB payload must be
			moved to a new PEB. 
		- Set the payload size to the PEB size minus 2 sub-pages (as
			UBI1). One sub page for the first LLP header and one for
			the last.
        - Follow PEB chain and erase them.
	    - * Once erased, the free PEB's active LLP header must be restored
	    	if the PEB itself is the head of a list (with free bit set).
	    - ...and how do we do that safely????
		- Using the update partner logic
	    - Unfortunately this means that we will use another sub-page when
		the PEB gets mapped in, just to set the Free bit to zero.
		This cannot be helped.
        - Cache the index's of the newly erased PEBs
        - Breaks the update partner rule??
	    - Not if we have to restore the LLP H to the newly erased block,
		this can have the UPP.


    - Background garbage collection thread would seek out free PEBs and cache
        their index's

    - At initial mount time, initial writes would be slow if the GC thread
        had not found free PEBs (but still zero mount time)

    - To make the FLASH completely empty, simple erase all of it!
	- However the problem is may have to write the LLP header for the 
	  start of the chain before we write the body data payload and
	  if the LLP header array is at the end of the PEB then we will not
	  be writing the PEB sequentially (bad for MLC nand)
	- Too avoid the situation we have two LLP header arrays, one at the
	  start for use when the PEB is free, and the other end one used when
	  the PEB is used.

    - We do not retain any information on the age of PEB (so, who cares)]

    - Need to make sure we check when PEBs begin to fail
        - > threshold bit errors (75% of ECC correction capability)
        - Mark bad PEBs

    - Power outage during GC leaves dangling chain problem
        - Make sure the GC thread has the whole chain LLP headers in cache
            before attempting to reclaim the PEBs
        - Minimise the chances by:
            - 1. Erasing the PEBs reclaimed in reverse order, starting at the 
                end of the list.
            - 2. GC background thread lazily walks through flash reading
                chains (using cache if possible). If is finds a chain that
                terminates in an erased (free) PEB then the whole chain
                should be free.
        - However if the outage occurs in between 1 and 2 above, i.e. the
            PEB chain does not end in an empty (free) PEB then (2) above
            will not recognise the chain as free.
            - Do not worry. The chances of this are small and eventually
                the PEB at the end of the free chain will be erased and 
                the GC thread can then find the free PEB list.
            - So if this occurs the free PEB pool will be reduced in size
                for a while (which will itself trigger more GC), but the
                situation will recover.


        



Physical Erase Block (PEB) Structure
====================================

Typical structure:

PEB is divided into sub-pages:

    -------------------------	 
    | First sub-page LLP H  |	 (1)
    -------------------------	 
    |  Erase Block Payload  |	 (2)
    -------------------------	 
    |  Erase Block Payload  |	 (2)
    -------------------------	 
    |  Erase Block Payload  |	 (2)
    -------------------------	 
    |      LLP Header       |	 (3)
    -------------------------	 
    |  Erase Block Payload  |	 (2)
    -------------------------	 
    |  Erase Block Payload  |	 (2)
    -------------------------	 
                .
                .		
                .
    -------------------------	 
    |  Erase Block Payload  |	 (2)
    -------------------------	 
    |      LLP Header       |	 (3)
    -------------------------	 
    |  Erase Block Payload  |	 (4)
    -------------------------	 
    |  	      EMPTY	    |	 (5)
    -------------------------	 
    |  	      EMPTY	    |    (5)
    -------------------------	 
    | Last sub-page LLP H   |	 (6)
    -------------------------	 

(1) The first sub-page of the PEB is always (maybe not if unmapped?) a LLP H
	type.
(2) EBP sub-pages containing data written to the LEB at the API.

(3) Updates to the LLP Header are interleaved with the EBP sub-pages.

(4) Last EBP written

(5) Empty pages that were never written before the LEB was unmapped.

(6) The last sub-page of the PEB is always used for LLP H when the PEB is 
	not the end of the list.

PROBLEM: We have to write whole sub-page at once???
SOLUTION: Use whole sub page for LLP Header
 - This is a massive overhead and reduces the storage efficiency. Say we want
	8 LLP headers, typically there may only be 64 sub-pages which means 87%
	efficiency 
 - Make the number of LLP headers in the array tunable. 
 - Also use the spare space in the IO unit for:
	- VID & EC headers from UBI1
	- LLP Header copies for the other elements in the list following the
	  LEB, if known (and will only be known if the LLP header that is the
  	  head of another list is update, for example when the other list is
	  GC'ed and the LLP header is updated to reduce the other list length 
	  to 1.
	
PROBLEM: The API allows *not* writing all sub-pages of the LEB at once.
	This means that we cannot write the LLP header at the end of the PEB 
	because we also want to write the PEB sequentially (necessary for MLC).
SOLUTION: Interleave sub pages in the PEB between Payload type and LLP header 
	type.
PROBLEMS: 
	1. Cannot set the usable payload size of the LEB
		- Set the usable payload size to LEB size minus 2 sub-pages
		- Continue down the LEB interleaving sub pages with LLP headers
		- The first sub-page written will be an LLP Header
		- Once we have filled the second last sub-page move the LEB
			payload to a new clean LEB which has no interleaved
			LLP Header sub-pages, using the last sub-page of
			the old LEB for the LLP Header to the next one (a bit
			like a page scrub).
		- LEB unmap requests will be satisfied by writing the last
			sub-page in the LEB with the NLP.


	2. When searching for the latest (active) LLP header, we (possible) 
		have to do lots of reading of the sub-pages, we do not know the
		position of the last (active) LLP header.
		- Difficult to avoid. We can start by checking the last
			sub-page, in case this is not the end of the chain.
		- As mentioned elsewhere, include information in the sub-page
			of other sub-pages. This can be updated when the LLP
			header is updated (but we still have to find it).

	3. We now have a virtual->physical mapping for sub-pages. This data
		needs to be included in the LLP Header.
		- We can calculate the v->p mapping of any payload sub-pages
		  	written after the last LLP Header.
		- But if the sub-pages are not written in order, we must leave
			gaps (but this would break MLC anyway so it probably
			will not happen).

	4. We have to differentiate the payload sub-pages from the LLP Header
		sub-pages. THIS IS A SECURITY RISK and it would be possible to
		write a payload sub page that looks like an LLP H and fool ubi2
		into providing access to data that it should not.
PROBLEM: How to avoid this security risk
	Perhaps we could check that the other LLP Header sub pages
		have information on this page? 
	But what if there are no other valid LLP H sub pages, i.e. all others
		have crc errors??
	Perhaps we should be crypto signing the LLP H sub pages?
		No, will not be secure either (and slow).
	

LLP Header
==========

    -------------------------
    |       UPP, USN        |
    |       UPP-CRC         |
    -------------------------
    |       LLP, NLP        |
    |      Free, Bad        |
    |       LLP-CRC         |
    -------------------------
    |      Old LLP Flag     |	<- not needed, last one in PEB is active
    -------------------------
    | Bitmask of LLP Header |
    |   sub-page indexs     |
    -------------------------
    |         LEB           |
    -------------------------


LLP - Linked List Pointer
=========================

Physical Erase Block (PEB) number of the first item in the linked list, where
the block at the end of the list holds the data payload for the Logical 
Erase Block (LEB) where the LEB number is equal the this PEB number.

e.g. LEB number 10 is mapped to PEB 22

        PEB num 10                 
        -----------               
        | Payload |                PEB 22:
        |   LLP   | --> (list) --> -----------
        -----------                | Payload |
                                   |   LLP   | --> (null)
                                   -----------


Erase Block Index of the first item in the list. When a LEB is first mapped 
to the a PEB, the PEB at the LEB index holds the LLP with index of the PEB
that holds the LEBs payload.


NLP - Next List Pointer
=======================

The NLP links the list of PEBs between the PEB head (at PEB number == 
LEB number) and the end of the list where the data payload for the LEB
is found.

e.g. Expand our previous example where LEB 10 is mapped to PEB 22 but this
time we see that the list runs through LEB 99


        PEB num 10                 
        -----------               
        | Payload |     PEB 99:
        |   LLP   | --> -----------
        |   NLP   |     | Payload |
        -----------     |   LLP   |     PEB 22: 
                        |   NLP   | --> -----------
                        -----------     | Payload |
                                        |   LLP   |
                                        |   NLP   |
                                        -----------

Obviously the chain can be any length (although steps are taken to)
minimise the chain lengths to avoid having to read many pages when
first discovering the PEB mapped to a particular LEB.


Mapping & unmapping operations
==============================

In this design, LEBs are always mapped to a PEB. The Unmap operation simply
switches the LEB to be mapped to a (payload) empty PEB and the map operation
is a NOP.
Unmap operation that switches the LEB to a clean PEB is achieved by updating the
LLP Header of the last PEB in the chain is that it's NLP points to a new PEB.
This increases the length of the chain by one PEB. The last sub-page in the
PEB is used for the updated LLP header in this case. This is an optimisation
that allows the active LLP header to be found quickly when first following the
chain.

The exception to the rule is when a PEB is completely erased. It has no LLP 
header in the first sub-page (infact the first sub-page contains only 1 bits).
The corresponding LEB (has the same index) is in this case *is* unmapped. The
map operation on this LEB does indeed write the PEB with its first LLP header.
Unmap operations on completely erased LEB (PEB) is a NOP.



LLP-CRC
=======

Holds a checksum of the LLP and NLP parts of the LLP Header.


Old LLP Flag
============

THIS IS NO LONGER NEEDED (or desirable, we do not want to do the extra sub-page
write) The last LLP sub-page in the PEB is the active one.

This flag is 1 (the flash erased state) when the LLP Header is in use and 0
when the header is an old header and no longer used.

In order to allow the LLP/NLP pointers of PEB's to be updated without having to 
erase the block, space for new LLP Headers is provided in every PEB.

When erased, all the Old LLP flags will be set to 1 (erased state). Following
erasure the first LLP Header is written. When an update to the first LLP is
required, the first LLP is marked as Old and the second LLP header is written
with the new information and so on.

When the last LLP header is used, the software will look to move the entire 
PEB page to a new empty PEB, which will have a new set of empty LLP Headers. In 
this case, the entire PEB contents including payload must be copied to the 
new empty PEB.

When following the list of PEBs to find the end element (the PEB containing the
LEB data), the software must read the array of LLP Headers from each PEB it 
encounters. Only the first LLP in the array which is not old, and has a valid
LLP-CRC, can be used for valid data.

If the LLP-CRC check fails, then the previous LLP Header in the array will be
used for valid data.
TODO - what if this is the first LLP Header in the array??


UPP - Update Partner Pointer
============================

The UPP and USN are used together to provide protection against power outage
at inconvenient times, more specifically when LLP Headers are updated.

Each atomic change for the lists involves updating two LLP headers, the first 
update sets an NLP to the new item on the list and the second updates the new 
list item. The two PEBs containing the LLP Headers updated are called
Update Partners and their PEB numbers are set in the UPP.
	- A second scenario is where the LLP header of the second element 
		in a chain is updated (to add updated partner info) followed
		by the first element in the chain being erased and then the
		LLP header restored.

When ever an update to a LLP Header is made, after the previous LLP Header in
the array is marked as Old, the UPP number is written. Higher level software
which is managing PEB list manipulation will know the two partners being
updated.

This helps with the detection and correction of the situation where a power
outage occurred in between the update of the LLP Headers of the two partners.


USN - Update Serial Number
==========================

The USN is a global incrementing number that counts each update to a pair of
LLP headers (which changes the flash from one valid state to another).

When updating an LLP Header, after the UPP is written, the USN is also written.
On completion of the update, the USN of both partners shall match.

When software follows the list of PEBs to find the end, as previously explained,
in addition to checking the LLP-CRC's, software will also check the USN of
the update partner. If it finds that the partner USN does not match then the
software will discard the particular LLP Header and revert to the previous one
in the list.  TODO - think this through??
	- This breaks down when the partner is unmapped and erased.
		- Not any more because the partner may need a new LLP H to
			maintain the head of an LLP list.
	- TODO However we do need to think this through.

	- The update partners should have information about each others LLP H
		within their LLP Header so that the SW can rebuild the partner
		LLP Header.
		- The SW can check if the other LLP Header information it finds
			is up to date by checking that the USN is higher than 
			the partners active LLP H USN.

One optimisation here is that if the USN is less than the highest USN 
encountered so far, then it must be correct as only the last USN will be
(possibly) corrupted by power outage.


UPP-CRC
=======

TODO


Free PEBs
=========

TODO

Torturing
=========

TODO - As UBI1 (torture_peb())

Partitioning device into volumes
================================

This is achieved at the logical level by simply carving up the logical space
into volumes.


Volume Table
============

This is a data table that needs to be storred in flash and contains information
on the volume partitioning. A special volume (zero) is created that holds the
volume table. This is positioned at the very start of the flash where is
can be found without knowing the volume table information (bootstrap). 

LEB numbers are actually the LEB *within a particular volume*. The API specifies
the volume along with the offset (which becomes the LEB) into it when reading
or writing.


Device Logical Erase Blocks (DLEB's)
====================================

As the LEB is the logical offset within a volume and a volume is a logical chunk
of the available LEBs made available on a device, we need another concept that
is the logical block number within the entire logical block range of the device,
i.e. accross all volumes on the device. This is the DLEB (prononced D-LEB).


Auto-resize
===========

TODO - As per UBI1 (cannot shrink)
Resize operation is easy to achieve, adding PEBs to a volume naturally adds
LEBs too.
However this is a problem for all but the last volume and is also difficult
to srink a volume.
Make this a limitation for now.


Volume Update
=============

Need to implementation volume update in much the same way as UBI1. Check the
volume update marker at attach time.


Volumes
=======

Volumes in UBI2 are simply areas of Logical space. The entire logical space of
the device to carved up into volumes. Volumes always occupy logical space at 
the beginning of the logical space and run consecutively without gaps and 
spare space is always filled with FF's i.e. erased.

Volume creation is quick any easy as it involves simply carving off the next 
chunk of logical space.

Volume deletion can be expensive as:
 1. it has to erase all LEBs in the volume
 2. it has to shift all other volumes to remove the gap created by the removal.

Volume resize is expensive as:
 1. other volumes have to be shifted to make space for the new volume size
 2. LEBs are erased.

MAYBE THIS IS NOT THE WAY TO GO!!!


Volumes (2nd idea)
==================

The volumes table includes a mapping table (quite large 10's of Kb) that maps
every PEB of the device to a vol_id/LEB number (the start of the chain to the
LEB that is).
This mapping table is quite static and need only be updated when a volume is
added/deleted or resized, or if a PEB is declared bad/erronious.
This solution has some benefits:
	- Quick lookup of PEB given an vol_id/LEB
	- No messy moving of volumes when deleted, added or resized.
	- Deals with the bad/erronous PEBs too.
This is a bit like the UBI1 eba_tbl, except we do the chaining too (map/unmap
is not handled by the eba_tbl).


Bad PEBs
========

The Bad flag in the active LLP Header indicates that the PEB is worn out and 
should not be used. PEBs are worn out when they have almost reached or passed 
their limit of error correction. 

Unfortunately, this design still needs to rely on PEBs after they have gone bad
as they will be used to read the LLP pointer to the list. So the LLP header
contents of the bad PEB will be read one time after each attach. Subsequent
reads will be satisfies by LLP Header cache.

To avoid further writes to the bad PEB, they are treated differently that good
PEBs:
    - When choosing a new PEB to attach to a list (changes to LEB), the software
        will not choose a bad one.
    - Related to Unchained free PEB: When garbage collecting free PEBs, the
        software will shorten the list to two elements plus the number of
        bad PEBs at the start of the list. This way the operation to shorten
        the list (which involves writing the PEB, LLP) will not be writing
        to the bad PEB.

The Last N sub-pages are set to the bad LLP Header contents, incase the bad data
is a corrupted LLP Header itself.

Note: If a PEB is so bad that no data can be read at all, we are stuck and the
device is now non-functional. Nothing can be done as we have to get the LLP
Header for the head of the list.
	- Maybe scope for putting the LLP Header in a different (the next)
		PEB LLP Header sub-pages.

THIS MAY NOT BE THE BEST WAY. See bad block skipping and the "Erronious PEB"
discussion below.


Data redundancy
===============

New idea. Have multiple LLP lists for each LEB so that we get redundancy, either
of the payload data (halves storage capacity immediately) or of the list chain.
	- Redundant list chain for list that terminates in the same PEB
		could be the answer to safety on power outage.
	- Redundant payloads help with the situation where a payload write
	 	is interrupted.

OR, use a similar mechanism to the volume table, for every page. This would
ensure that data pages could not be partially written.

Another thought, if three copies of data are written then we can recover many
bit errors. May be worth doing this for LLP Headers, instead of crc.


Erronious PEBs
==============

When PEBs are really bad, they will hold no data at all. We cannot use the PEB
for an LLP chain at all.
Maybe, instead of the above description for handling worn out blocks, we should
have a simple bad block skip mechanism. The bad block table can be held with the
volume information and for ease of use, PEB numbers that are known to be bad 
will not be chosen. 
The start of LEB chains will no longer be the PEB index, but adjusted PEB index
based on the bad block skipping.

PEB 123 -> chain -> LEB 123 payload
PEB 124 -> chain -> LEB 124 payload
PEB 125 BAD!!
PEB 126 -> chain -> LEB 125 payload
PEB 127 -> chain -> LEB 126 payload



Include ECC error correction
============================

The LLP H sub-pages could also have ECC correction data for detection of too
many errors. Otherwise rely on lower layers reporting -EBADMSG when data is
corrupted.


Wear Leveling
=============

The system needs to recycle blocks that are static into the ones that are
written more often so that the erase cycle wearing is distributed across the
device.
This will happen naturally anyway to some degree as any PEB stores the payload
for one LEB and also is the head of the list for another LEB.
However we need to forcibly eject static PEB from time to time by adding a new 
PEB to the chain and copying the payload data there (also is an opportunity
to add/update cache data placed with the LLP Headers). The background GC will
then eventually recycle the static PEB.
As we do not have erase counters, we have to monitor the PEB erase activity.
It is likely that static PEB are static always, so we do not need to record
the activity across reboots, in flash.


Implementation phases
=====================

To progress this and have some milestones, the implementation shall proceed:

1 - No scanning, LEB=PEB 
	- Attach, make volume tables

2 - Add PEB chaining, no GC

3 - Add GC

4 - Add caching optimisation

5 - Add other PEB LLP H data in spare


